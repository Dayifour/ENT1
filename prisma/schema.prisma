// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum√©rations
enum Sexe {
  M
  F
}

enum TypeUtilisateur {
  Etudiant
  Enseignant
  Membre
}

enum Niveau {
  Primaire
  Secondaire
  Licence
  Master1
  Master2
  Doctorat
}

enum Semestre {
  Semestre1
  Semestre2
  Semestre3
  Semestre4
}

enum Jour {
  Lundi
  Mardi
  Mercredi
  Jeudi
  Vendredi
  Samedi
}

enum TypePaiement {
  Inscription
  Scolarite
  Autre
}

model Utilisateurs {
  id_utilisateur Int      @id @default(autoincrement())
  nom            String
  prenom         String
  email          String   @unique
  mot_de_passe   String
  id_role        Int
  sexe           Sexe
  type           TypeUtilisateur
  telephone      String?  @db.VarChar(15)
  adresse        String?
  profil         String   @unique
  date_creation  DateTime @default(now())
  Role           Role     @relation(fields: [id_role], references: [id_role])
  Etudiants      Etudiants?
  Enseignant     Enseignant?
}

model Role {
  id_role      Int      @id @default(autoincrement())
  nom          String   @db.VarChar(50)
  description  String?  @db.VarChar(50)
  permissions  Json
  Utilisateurs Utilisateurs[]
}

model Annexes {
  id_annexe Int      @id @default(autoincrement())
  nom       String
  adresse   String
  ville     String?
  region    String?
  Filieres  Filieres[]
}

model Filieres {
  id_filiere  Int             @id @default(autoincrement())
  nom         String
  description String?
  niveau      Niveau
  id_annexe   Int?
  Annexes     Annexes?        @relation(fields: [id_annexe], references: [id_annexe])
  Modules     Modules[]
  Etudiants   Etudiants[]
  FiliereModule FiliereModule[]
}

model Modules {
  id_module     Int             @id @default(autoincrement())
  nom           String
  code_module   String          @unique
  description   String?
  credits       Int
  volumeHoraire Int?
  id_filiere    Int?
  Filieres      Filieres?       @relation(fields: [id_filiere], references: [id_filiere])
  FiliereModule FiliereModule[]
}

model FiliereModule {
  id_filiere_module Int         @id @default(autoincrement())
  syllabus          String?
  id_filiere        Int
  id_module         Int
  Filieres          Filieres    @relation(fields: [id_filiere], references: [id_filiere])
  Modules           Modules     @relation(fields: [id_module], references: [id_module])
  Cours             Cours[]
}

model Cours {
  id_cours          Int           @id @default(autoincrement())
  id_filiere_module Int
  id_professeur     Int
  semestre          Semestre
  annee_academique  String        @db.VarChar(9)
  FiliereModule     FiliereModule @relation(fields: [id_filiere_module], references: [id_filiere_module])
  Enseignant      Enseignant  @relation(fields: [id_professeur], references: [id])
  EmploisDuTemps    EmploisDuTemps[]
  Notes             Notes[]
}

model Etudiants {
  id            Int             @id @default(autoincrement())
  matricule     String          @unique
  id_utilisateur Int            @unique  
  date_naissance DateTime
  id_filiere     Int
  Utilisateurs   Utilisateurs   @relation(fields: [id_utilisateur], references: [id_utilisateur])
  Filieres       Filieres       @relation(fields: [id_filiere], references: [id_filiere])
  Notes          Notes[]
  Paiements      Paiements[]
}

model Enseignant {
  id            Int             @id @default(autoincrement())
  matricule     String          @unique
  id_utilisateur Int            @unique 
  specialite    String
  Utilisateurs  Utilisateurs    @relation(fields: [id_utilisateur], references: [id_utilisateur])
  Cours         Cours[]
}

model EmploisDuTemps {
  id_emploi   Int      @id @default(autoincrement())
  id_cours    Int
  jour        Jour
  heure_debut DateTime
  heure_fin   DateTime
  salle       String?
  Cours       Cours    @relation(fields: [id_cours], references: [id_cours])
}

model Notes {
  id_note          Int           @id @default(autoincrement())
  id_etudiant      Int
  id_cours         Int
  note_class       Float?
  note_exam        Float?
  commentaire      String?
  annee_academique String        @db.VarChar(9)
  date_saisie      DateTime      @default(now())
  Etudiants        Etudiants     @relation(fields: [id_etudiant], references: [id])
  Cours            Cours         @relation(fields: [id_cours], references: [id_cours])
}

model Paiements {
  id_paiement        Int          @id @default(autoincrement())
  id_etudiant        Int
  montant            Float
  date_paiement      DateTime
  type_paiement      TypePaiement
  reference_paiement String       @unique
  Etudiants          Etudiants    @relation(fields: [id_etudiant], references: [id])
}
